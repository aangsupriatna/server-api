
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Buffer
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

export type Union = any

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

/**
A [[Boolean]]
*/
export type Boolean = True | False

// /**
// 1
// */
export type True = 1

/**
0
*/
export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never



/**
 * Used by group by
 */

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
> = IsObject<T> extends True ? U : T

type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model User
 */

export type User = {
  id: number
  name: string
  email: string
  password: string
  role: UserRole
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Profile
 */

export type Profile = {
  id: number
  address: string | null
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Company
 */

export type Company = {
  id: number
  name: string
  address: string
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Project
 */

export type Project = {
  id: number
  title: string
  location: string | null
  finished: boolean
  companyId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const UserRole: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  SUPERADMIN: 'SUPERADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate;

  /**
   * `prisma.company`: Exposes CRUD operations for the **Company** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.company.findMany()
    * ```
    */
  get company(): Prisma.CompanyDelegate;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.14.0
   * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    Company: 'Company',
    Project: 'Project'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model User
   */


  export type AggregateUser = {
    count: number | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    password: string | null
    role: UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    name: string | null
    email: string | null
    password: string | null
    role: UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number | null
    email: number | null
    password: number | null
    role: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateUserArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends AggregateUserArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
  }

  export type GetUserAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
  }

    



  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    company?: boolean | CompanyArgs
    profiles?: boolean | ProfileArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude = {
    company?: boolean | CompanyArgs
    profiles?: boolean | ProfileArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | FindManyUserArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'company'
        ? CompanyGetPayload<S['include'][P]> | null :
        P extends 'profiles'
        ? ProfileGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'company'
        ? CompanyGetPayload<S['select'][P]> | null :
        P extends 'profiles'
        ? ProfileGetPayload<S['select'][P]> | null : never
  } 
    : User
  : User


  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find the first User that matches the filter.
     * @param {FindFirstUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserArgs>(
      args?: Subset<T, FindFirstUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserArgs>(
      args?: Subset<T, FindManyUserArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: Subset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: Subset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: Subset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: Subset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: Subset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: Subset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @deprecated This will be deprecated please use prisma.user.findUnique
     * @example
     * // Get one User
     * const user = await prisma.user.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Count the number of Users.
     * @param {FindManyUserArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a User.
     * @param {AggregateUserArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    company<T extends CompanyArgs = {}>(args?: Subset<T, CompanyArgs>): CheckSelect<T, Prisma__CompanyClient<Company | null>, Prisma__CompanyClient<CompanyGetPayload<T> | null>>;

    profiles<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type FindUniqueUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type FindFirstUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type FindManyUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: UserCreateInput
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: UserUpdateInput
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: UserCreateInput
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: UserUpdateInput
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    count: number | null
    avg: ProfileAvgAggregateOutputType | null
    sum: ProfileSumAggregateOutputType | null
    min: ProfileMinAggregateOutputType | null
    max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileAvgAggregateOutputType = {
    id: number
    userId: number
  }

  export type ProfileSumAggregateOutputType = {
    id: number
    userId: number
  }

  export type ProfileMinAggregateOutputType = {
    id: number
    address: string | null
    userId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: number
    address: string | null
    userId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    address: number | null
    userId: number
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type ProfileAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfileMinAggregateInputType = {
    id?: true
    address?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    address?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    address?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateProfileArgs = {
    /**
     * Filter which Profile to aggregate.
    **/
    where?: ProfileWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends AggregateProfileArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetProfileAggregateScalarType<T[P]>
  }

  export type GetProfileAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ProfileAvgAggregateOutputType ? ProfileAvgAggregateOutputType[P] : never
  }

    



  export type ProfileSelect = {
    id?: boolean
    address?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProfileInclude = {
    user?: boolean | UserArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | FindManyProfileArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Profile ?Profile [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Profile
  : Profile


  export interface ProfileDelegate {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {FindUniqueProfileArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueProfileArgs>(
      args: Subset<T, FindUniqueProfileArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>

    /**
     * Find the first Profile that matches the filter.
     * @param {FindFirstProfileArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstProfileArgs>(
      args?: Subset<T, FindFirstProfileArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>

    /**
     * Find zero or more Profiles that matches the filter.
     * @param {FindManyProfileArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyProfileArgs>(
      args?: Subset<T, FindManyProfileArgs>
    ): CheckSelect<T, Promise<Array<Profile>>, Promise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: Subset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: Subset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: Subset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: Subset<T, ProfileDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: Subset<T, ProfileUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: Subset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Find zero or one Profile that matches the filter.
     * @param {FindUniqueProfileArgs} args - Arguments to find a Profile
     * @deprecated This will be deprecated please use prisma.profile.findUnique
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueProfileArgs>(
      args: Subset<T, FindUniqueProfileArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>

    /**
     * Count the number of Profiles.
     * @param {FindManyProfileArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyProfileArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Profile.
     * @param {AggregateProfileArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateProfileArgs>(args: Subset<T, AggregateProfileArgs>): Promise<GetProfileAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type FindUniqueProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type FindFirstProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profile to fetch.
    **/
    where?: ProfileWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Profiles.
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type FindManyProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
    **/
    where?: ProfileWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Profiles to fetch.
    **/
    orderBy?: Enumerable<ProfileOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
    **/
    data: ProfileCreateInput
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
    **/
    data: ProfileUpdateInput
    /**
     * Choose, which Profile to update.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    data: ProfileUpdateManyMutationInput
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
    **/
    create: ProfileCreateInput
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
    **/
    update: ProfileUpdateInput
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model Company
   */


  export type AggregateCompany = {
    count: number | null
    avg: CompanyAvgAggregateOutputType | null
    sum: CompanySumAggregateOutputType | null
    min: CompanyMinAggregateOutputType | null
    max: CompanyMaxAggregateOutputType | null
  }

  export type CompanyAvgAggregateOutputType = {
    id: number
    userId: number
  }

  export type CompanySumAggregateOutputType = {
    id: number
    userId: number
  }

  export type CompanyMinAggregateOutputType = {
    id: number
    name: string | null
    address: string | null
    userId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyMaxAggregateOutputType = {
    id: number
    name: string | null
    address: string | null
    userId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompanyCountAggregateOutputType = {
    id: number
    name: number | null
    address: number | null
    userId: number
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type CompanyAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CompanySumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type CompanyMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompanyCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateCompanyArgs = {
    /**
     * Filter which Company to aggregate.
    **/
    where?: CompanyWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Companies to fetch.
    **/
    orderBy?: Enumerable<CompanyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Companies
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CompanyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CompanySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CompanyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CompanyMaxAggregateInputType
  }

  export type GetCompanyAggregateType<T extends AggregateCompanyArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCompanyAggregateScalarType<T[P]>
  }

  export type GetCompanyAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof CompanyAvgAggregateOutputType ? CompanyAvgAggregateOutputType[P] : never
  }

    



  export type CompanySelect = {
    id?: boolean
    name?: boolean
    address?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    projects?: boolean | FindManyProjectArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompanyInclude = {
    user?: boolean | UserArgs
    projects?: boolean | FindManyProjectArgs
  }

  export type CompanyGetPayload<
    S extends boolean | null | undefined | CompanyArgs,
    U = keyof S
      > = S extends true
        ? Company
    : S extends undefined
    ? never
    : S extends CompanyArgs | FindManyCompanyArgs
    ?'include' extends U
    ? Company  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'projects'
        ? Array < ProjectGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Company ?Company [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'projects'
        ? Array < ProjectGetPayload<S['select'][P]>>  : never
  } 
    : Company
  : Company


  export interface CompanyDelegate {
    /**
     * Find zero or one Company that matches the filter.
     * @param {FindUniqueCompanyArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueCompanyArgs>(
      args: Subset<T, FindUniqueCompanyArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company | null>, Prisma__CompanyClient<CompanyGetPayload<T> | null>>

    /**
     * Find the first Company that matches the filter.
     * @param {FindFirstCompanyArgs} args - Arguments to find a Company
     * @example
     * // Get one Company
     * const company = await prisma.company.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstCompanyArgs>(
      args?: Subset<T, FindFirstCompanyArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company | null>, Prisma__CompanyClient<CompanyGetPayload<T> | null>>

    /**
     * Find zero or more Companies that matches the filter.
     * @param {FindManyCompanyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.company.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.company.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companyWithIdOnly = await prisma.company.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyCompanyArgs>(
      args?: Subset<T, FindManyCompanyArgs>
    ): CheckSelect<T, Promise<Array<Company>>, Promise<Array<CompanyGetPayload<T>>>>

    /**
     * Create a Company.
     * @param {CompanyCreateArgs} args - Arguments to create a Company.
     * @example
     * // Create one Company
     * const Company = await prisma.company.create({
     *   data: {
     *     // ... data to create a Company
     *   }
     * })
     * 
    **/
    create<T extends CompanyCreateArgs>(
      args: Subset<T, CompanyCreateArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company>, Prisma__CompanyClient<CompanyGetPayload<T>>>

    /**
     * Delete a Company.
     * @param {CompanyDeleteArgs} args - Arguments to delete one Company.
     * @example
     * // Delete one Company
     * const Company = await prisma.company.delete({
     *   where: {
     *     // ... filter to delete one Company
     *   }
     * })
     * 
    **/
    delete<T extends CompanyDeleteArgs>(
      args: Subset<T, CompanyDeleteArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company>, Prisma__CompanyClient<CompanyGetPayload<T>>>

    /**
     * Update one Company.
     * @param {CompanyUpdateArgs} args - Arguments to update one Company.
     * @example
     * // Update one Company
     * const company = await prisma.company.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompanyUpdateArgs>(
      args: Subset<T, CompanyUpdateArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company>, Prisma__CompanyClient<CompanyGetPayload<T>>>

    /**
     * Delete zero or more Companies.
     * @param {CompanyDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.company.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompanyDeleteManyArgs>(
      args?: Subset<T, CompanyDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Companies.
     * @param {CompanyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const company = await prisma.company.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompanyUpdateManyArgs>(
      args: Subset<T, CompanyUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Company.
     * @param {CompanyUpsertArgs} args - Arguments to update or create a Company.
     * @example
     * // Update or create a Company
     * const company = await prisma.company.upsert({
     *   create: {
     *     // ... data to create a Company
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company we want to update
     *   }
     * })
    **/
    upsert<T extends CompanyUpsertArgs>(
      args: Subset<T, CompanyUpsertArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company>, Prisma__CompanyClient<CompanyGetPayload<T>>>

    /**
     * Find zero or one Company that matches the filter.
     * @param {FindUniqueCompanyArgs} args - Arguments to find a Company
     * @deprecated This will be deprecated please use prisma.company.findUnique
     * @example
     * // Get one Company
     * const company = await prisma.company.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueCompanyArgs>(
      args: Subset<T, FindUniqueCompanyArgs>
    ): CheckSelect<T, Prisma__CompanyClient<Company | null>, Prisma__CompanyClient<CompanyGetPayload<T> | null>>

    /**
     * Count the number of Companies.
     * @param {FindManyCompanyArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.company.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyCompanyArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Company.
     * @param {AggregateCompanyArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCompanyArgs>(args: Subset<T, AggregateCompanyArgs>): Promise<GetCompanyAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Company.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompanyClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    projects<T extends FindManyProjectArgs = {}>(args?: Subset<T, FindManyProjectArgs>): CheckSelect<T, Promise<Array<Project>>, Promise<Array<ProjectGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Company findUnique
   */
  export type FindUniqueCompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CompanyInclude | null
    /**
     * Filter, which Company to fetch.
    **/
    where: CompanyWhereUniqueInput
  }


  /**
   * Company findFirst
   */
  export type FindFirstCompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CompanyInclude | null
    /**
     * Filter, which Company to fetch.
    **/
    where?: CompanyWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Companies to fetch.
    **/
    orderBy?: Enumerable<CompanyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Companies.
    **/
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Companies.
    **/
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * Company findMany
   */
  export type FindManyCompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CompanyInclude | null
    /**
     * Filter, which Companies to fetch.
    **/
    where?: CompanyWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Companies to fetch.
    **/
    orderBy?: Enumerable<CompanyOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Companies.
    **/
    cursor?: CompanyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Companies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Companies.
    **/
    skip?: number
    distinct?: Enumerable<CompanyScalarFieldEnum>
  }


  /**
   * Company create
   */
  export type CompanyCreateArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CompanyInclude | null
    /**
     * The data needed to create a Company.
    **/
    data: CompanyCreateInput
  }


  /**
   * Company update
   */
  export type CompanyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CompanyInclude | null
    /**
     * The data needed to update a Company.
    **/
    data: CompanyUpdateInput
    /**
     * Choose, which Company to update.
    **/
    where: CompanyWhereUniqueInput
  }


  /**
   * Company updateMany
   */
  export type CompanyUpdateManyArgs = {
    data: CompanyUpdateManyMutationInput
    where?: CompanyWhereInput
  }


  /**
   * Company upsert
   */
  export type CompanyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CompanyInclude | null
    /**
     * The filter to search for the Company to update in case it exists.
    **/
    where: CompanyWhereUniqueInput
    /**
     * In case the Company found by the `where` argument doesn't exist, create a new Company with this data.
    **/
    create: CompanyCreateInput
    /**
     * In case the Company was found with the provided `where` argument, update it with this data.
    **/
    update: CompanyUpdateInput
  }


  /**
   * Company delete
   */
  export type CompanyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CompanyInclude | null
    /**
     * Filter which Company to delete.
    **/
    where: CompanyWhereUniqueInput
  }


  /**
   * Company deleteMany
   */
  export type CompanyDeleteManyArgs = {
    where?: CompanyWhereInput
  }


  /**
   * Company without action
   */
  export type CompanyArgs = {
    /**
     * Select specific fields to fetch from the Company
    **/
    select?: CompanySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CompanyInclude | null
  }



  /**
   * Model Project
   */


  export type AggregateProject = {
    count: number | null
    avg: ProjectAvgAggregateOutputType | null
    sum: ProjectSumAggregateOutputType | null
    min: ProjectMinAggregateOutputType | null
    max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number
    companyId: number
  }

  export type ProjectSumAggregateOutputType = {
    id: number
    companyId: number
  }

  export type ProjectMinAggregateOutputType = {
    id: number
    title: string | null
    location: string | null
    finished: boolean | null
    companyId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number
    title: string | null
    location: string | null
    finished: boolean | null
    companyId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    title: number | null
    location: number | null
    finished: number | null
    companyId: number
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
    companyId?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    title?: true
    location?: true
    finished?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    title?: true
    location?: true
    finished?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    title?: true
    location?: true
    finished?: true
    companyId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateProjectArgs = {
    /**
     * Filter which Project to aggregate.
    **/
    where?: ProjectWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Projects to fetch.
    **/
    orderBy?: Enumerable<ProjectOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends AggregateProjectArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetProjectAggregateScalarType<T[P]>
  }

  export type GetProjectAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ProjectAvgAggregateOutputType ? ProjectAvgAggregateOutputType[P] : never
  }

    



  export type ProjectSelect = {
    id?: boolean
    title?: boolean
    location?: boolean
    finished?: boolean
    company?: boolean | CompanyArgs
    companyId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProjectInclude = {
    company?: boolean | CompanyArgs
  }

  export type ProjectGetPayload<
    S extends boolean | null | undefined | ProjectArgs,
    U = keyof S
      > = S extends true
        ? Project
    : S extends undefined
    ? never
    : S extends ProjectArgs | FindManyProjectArgs
    ?'include' extends U
    ? Project  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'company'
        ? CompanyGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Project ?Project [P]
  : 
          P extends 'company'
        ? CompanyGetPayload<S['select'][P]> : never
  } 
    : Project
  : Project


  export interface ProjectDelegate {
    /**
     * Find zero or one Project that matches the filter.
     * @param {FindUniqueProjectArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueProjectArgs>(
      args: Subset<T, FindUniqueProjectArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>

    /**
     * Find the first Project that matches the filter.
     * @param {FindFirstProjectArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstProjectArgs>(
      args?: Subset<T, FindFirstProjectArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>

    /**
     * Find zero or more Projects that matches the filter.
     * @param {FindManyProjectArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyProjectArgs>(
      args?: Subset<T, FindManyProjectArgs>
    ): CheckSelect<T, Promise<Array<Project>>, Promise<Array<ProjectGetPayload<T>>>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs>(
      args: Subset<T, ProjectCreateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs>(
      args: Subset<T, ProjectDeleteArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs>(
      args: Subset<T, ProjectUpdateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: Subset<T, ProjectDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Projects.
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: Subset<T, ProjectUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs>(
      args: Subset<T, ProjectUpsertArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>

    /**
     * Find zero or one Project that matches the filter.
     * @param {FindUniqueProjectArgs} args - Arguments to find a Project
     * @deprecated This will be deprecated please use prisma.project.findUnique
     * @example
     * // Get one Project
     * const project = await prisma.project.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueProjectArgs>(
      args: Subset<T, FindUniqueProjectArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>

    /**
     * Count the number of Projects.
     * @param {FindManyProjectArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyProjectArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Project.
     * @param {AggregateProjectArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateProjectArgs>(args: Subset<T, AggregateProjectArgs>): Promise<GetProjectAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    company<T extends CompanyArgs = {}>(args?: Subset<T, CompanyArgs>): CheckSelect<T, Prisma__CompanyClient<Company | null>, Prisma__CompanyClient<CompanyGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Project findUnique
   */
  export type FindUniqueProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findFirst
   */
  export type FindFirstProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
    **/
    where?: ProjectWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Projects to fetch.
    **/
    orderBy?: Enumerable<ProjectOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Projects.
    **/
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project findMany
   */
  export type FindManyProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Projects to fetch.
    **/
    where?: ProjectWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Projects to fetch.
    **/
    orderBy?: Enumerable<ProjectOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
    **/
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to create a Project.
    **/
    data: ProjectCreateInput
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to update a Project.
    **/
    data: ProjectUpdateInput
    /**
     * Choose, which Project to update.
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    data: ProjectUpdateManyMutationInput
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * The filter to search for the Project to update in case it exists.
    **/
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
    **/
    create: ProjectCreateInput
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
    **/
    update: ProjectUpdateInput
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * Filter which Project to delete.
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    where?: ProjectWhereInput
  }


  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    address: 'address',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const CompanyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompanyScalarFieldEnum = (typeof CompanyScalarFieldEnum)[keyof typeof CompanyScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    title: 'title',
    location: 'location',
    finished: 'finished',
    companyId: 'companyId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    role?: EnumUserRoleFilter | UserRole
    company?: XOR<CompanyWhereInput, CompanyRelationFilter> | null
    profiles?: XOR<ProfileWhereInput, ProfileRelationFilter> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    id?: IntFilter | number
    address?: StringNullableFilter | string | null
    user?: XOR<UserWhereInput, UserRelationFilter>
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProfileOrderByInput = {
    id?: SortOrder
    address?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileWhereUniqueInput = {
    id?: number
  }

  export type CompanyWhereInput = {
    AND?: Enumerable<CompanyWhereInput>
    OR?: Enumerable<CompanyWhereInput>
    NOT?: Enumerable<CompanyWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    address?: StringFilter | string
    user?: XOR<UserWhereInput, UserRelationFilter>
    userId?: IntFilter | number
    projects?: ProjectListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CompanyOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompanyWhereUniqueInput = {
    id?: number
  }

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    location?: StringNullableFilter | string | null
    finished?: BoolFilter | boolean
    company?: XOR<CompanyWhereInput, CompanyRelationFilter>
    companyId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProjectOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    location?: SortOrder
    finished?: SortOrder
    companyId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectWhereUniqueInput = {
    id?: number
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    role?: UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateOneWithoutUserInput
    profiles?: ProfileCreateOneWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutUserInput
    profiles?: ProfileUpdateOneWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutProfilesInput
  }

  export type ProfileUpdateInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfilesInput
  }

  export type ProfileUpdateManyMutationInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompanyCreateInput = {
    name: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutCompanyInput
    projects?: ProjectCreateManyWithoutCompanyInput
  }

  export type CompanyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCompanyInput
    projects?: ProjectUpdateManyWithoutCompanyInput
  }

  export type CompanyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateInput = {
    title: string
    location?: string | null
    finished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    company: CompanyCreateOneWithoutProjectsInput
  }

  export type ProjectUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    finished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneRequiredWithoutProjectsInput
  }

  export type ProjectUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    finished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumUserRoleFilter = {
    equals?: UserRole
    in?: Enumerable<UserRole>
    notIn?: Enumerable<UserRole>
    not?: NestedEnumUserRoleFilter | UserRole
  }

  export type CompanyRelationFilter = {
    is?: CompanyWhereInput | null
    isNot?: CompanyWhereInput | null
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type CompanyCreateOneWithoutUserInput = {
    create?: CompanyCreateWithoutUserInput
    connect?: CompanyWhereUniqueInput
    connectOrCreate?: CompanyCreateOrConnectWithoutuserInput
  }

  export type ProfileCreateOneWithoutUserInput = {
    create?: ProfileCreateWithoutUserInput
    connect?: ProfileWhereUniqueInput
    connectOrCreate?: ProfileCreateOrConnectWithoutuserInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CompanyUpdateOneWithoutUserInput = {
    create?: CompanyCreateWithoutUserInput
    connect?: CompanyWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: CompanyUpdateWithoutUserInput
    upsert?: CompanyUpsertWithoutUserInput
    connectOrCreate?: CompanyCreateOrConnectWithoutuserInput
  }

  export type ProfileUpdateOneWithoutUserInput = {
    create?: ProfileCreateWithoutUserInput
    connect?: ProfileWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: ProfileUpdateWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    connectOrCreate?: ProfileCreateOrConnectWithoutuserInput
  }

  export type UserCreateOneWithoutProfilesInput = {
    create?: UserCreateWithoutProfilesInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutprofilesInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutProfilesInput = {
    create?: UserCreateWithoutProfilesInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutProfilesInput
    upsert?: UserUpsertWithoutProfilesInput
    connectOrCreate?: UserCreateOrConnectWithoutprofilesInput
  }

  export type UserCreateOneWithoutCompanyInput = {
    create?: UserCreateWithoutCompanyInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutcompanyInput
  }

  export type ProjectCreateManyWithoutCompanyInput = {
    create?: Enumerable<ProjectCreateWithoutCompanyInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutcompanyInput>
  }

  export type UserUpdateOneRequiredWithoutCompanyInput = {
    create?: UserCreateWithoutCompanyInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutCompanyInput
    upsert?: UserUpsertWithoutCompanyInput
    connectOrCreate?: UserCreateOrConnectWithoutcompanyInput
  }

  export type ProjectUpdateManyWithoutCompanyInput = {
    create?: Enumerable<ProjectCreateWithoutCompanyInput>
    connect?: Enumerable<ProjectWhereUniqueInput>
    set?: Enumerable<ProjectWhereUniqueInput>
    disconnect?: Enumerable<ProjectWhereUniqueInput>
    delete?: Enumerable<ProjectWhereUniqueInput>
    update?: Enumerable<ProjectUpdateWithWhereUniqueWithoutCompanyInput>
    updateMany?: Enumerable<ProjectUpdateManyWithWhereWithoutCompanyInput>
    deleteMany?: Enumerable<ProjectScalarWhereInput>
    upsert?: Enumerable<ProjectUpsertWithWhereUniqueWithoutCompanyInput>
    connectOrCreate?: Enumerable<ProjectCreateOrConnectWithoutcompanyInput>
  }

  export type CompanyCreateOneWithoutProjectsInput = {
    create?: CompanyCreateWithoutProjectsInput
    connect?: CompanyWhereUniqueInput
    connectOrCreate?: CompanyCreateOrConnectWithoutprojectsInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type CompanyUpdateOneRequiredWithoutProjectsInput = {
    create?: CompanyCreateWithoutProjectsInput
    connect?: CompanyWhereUniqueInput
    update?: CompanyUpdateWithoutProjectsInput
    upsert?: CompanyUpsertWithoutProjectsInput
    connectOrCreate?: CompanyCreateOrConnectWithoutprojectsInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumUserRoleFilter = {
    equals?: UserRole
    in?: Enumerable<UserRole>
    notIn?: Enumerable<UserRole>
    not?: NestedEnumUserRoleFilter | UserRole
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type CompanyCreateWithoutUserInput = {
    name: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
    projects?: ProjectCreateManyWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutuserInput = {
    where: CompanyWhereUniqueInput
    create: CompanyCreateWithoutUserInput
  }

  export type ProfileCreateWithoutUserInput = {
    address?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileCreateOrConnectWithoutuserInput = {
    where: ProfileWhereUniqueInput
    create: ProfileCreateWithoutUserInput
  }

  export type CompanyUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    projects?: ProjectUpdateManyWithoutCompanyInput
  }

  export type CompanyUpsertWithoutUserInput = {
    update: CompanyUpdateWithoutUserInput
    create: CompanyCreateWithoutUserInput
  }

  export type ProfileUpdateWithoutUserInput = {
    address?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUpsertWithoutUserInput = {
    update: ProfileUpdateWithoutUserInput
    create: ProfileCreateWithoutUserInput
  }

  export type UserCreateWithoutProfilesInput = {
    name: string
    email: string
    password: string
    role?: UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    company?: CompanyCreateOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutprofilesInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutProfilesInput
  }

  export type UserUpdateWithoutProfilesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    company?: CompanyUpdateOneWithoutUserInput
  }

  export type UserUpsertWithoutProfilesInput = {
    update: UserUpdateWithoutProfilesInput
    create: UserCreateWithoutProfilesInput
  }

  export type UserCreateWithoutCompanyInput = {
    name: string
    email: string
    password: string
    role?: UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    profiles?: ProfileCreateOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutcompanyInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutCompanyInput
  }

  export type ProjectCreateWithoutCompanyInput = {
    title: string
    location?: string | null
    finished?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectCreateOrConnectWithoutcompanyInput = {
    where: ProjectWhereUniqueInput
    create: ProjectCreateWithoutCompanyInput
  }

  export type UserUpdateWithoutCompanyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profiles?: ProfileUpdateOneWithoutUserInput
  }

  export type UserUpsertWithoutCompanyInput = {
    update: UserUpdateWithoutCompanyInput
    create: UserCreateWithoutCompanyInput
  }

  export type ProjectUpdateWithWhereUniqueWithoutCompanyInput = {
    where: ProjectWhereUniqueInput
    data: ProjectUpdateWithoutCompanyInput
  }

  export type ProjectUpdateManyWithWhereWithoutCompanyInput = {
    where: ProjectScalarWhereInput
    data: ProjectUpdateManyMutationInput
  }

  export type ProjectScalarWhereInput = {
    AND?: Enumerable<ProjectScalarWhereInput>
    OR?: Enumerable<ProjectScalarWhereInput>
    NOT?: Enumerable<ProjectScalarWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    location?: StringNullableFilter | string | null
    finished?: BoolFilter | boolean
    companyId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutCompanyInput = {
    where: ProjectWhereUniqueInput
    update: ProjectUpdateWithoutCompanyInput
    create: ProjectCreateWithoutCompanyInput
  }

  export type CompanyCreateWithoutProjectsInput = {
    name: string
    address: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutCompanyInput
  }

  export type CompanyCreateOrConnectWithoutprojectsInput = {
    where: CompanyWhereUniqueInput
    create: CompanyCreateWithoutProjectsInput
  }

  export type CompanyUpdateWithoutProjectsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCompanyInput
  }

  export type CompanyUpsertWithoutProjectsInput = {
    update: CompanyUpdateWithoutProjectsInput
    create: CompanyCreateWithoutProjectsInput
  }

  export type ProjectUpdateWithoutCompanyInput = {
    title?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    finished?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.UserScalarFieldEnum`
 */
export type UserScalarFieldEnum = Prisma.UserScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ProfileScalarFieldEnum`
 */
export type ProfileScalarFieldEnum = Prisma.ProfileScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.CompanyScalarFieldEnum`
 */
export type CompanyScalarFieldEnum = Prisma.CompanyScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ProjectScalarFieldEnum`
 */
export type ProjectScalarFieldEnum = Prisma.ProjectScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.QueryMode`
 */
export type QueryMode = Prisma.QueryMode

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateUser`
 */
export type AggregateUser = Prisma.AggregateUser

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateOutputType`
 */
export type UserAvgAggregateOutputType = Prisma.UserAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateOutputType`
 */
export type UserSumAggregateOutputType = Prisma.UserSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateOutputType`
 */
export type UserMinAggregateOutputType = Prisma.UserMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateOutputType`
 */
export type UserMaxAggregateOutputType = Prisma.UserMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateOutputType`
 */
export type UserCountAggregateOutputType = Prisma.UserCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUserArgs`
 */
export type AggregateUserArgs = Prisma.AggregateUserArgs

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateInputType`
 */
export type UserAvgAggregateInputType = Prisma.UserAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateInputType`
 */
export type UserSumAggregateInputType = Prisma.UserSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateInputType`
 */
export type UserMinAggregateInputType = Prisma.UserMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateInputType`
 */
export type UserMaxAggregateInputType = Prisma.UserMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateInputType`
 */
export type UserCountAggregateInputType = Prisma.UserCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSelect`
 */
export type UserSelect = Prisma.UserSelect

/**
 * @deprecated Renamed to `Prisma.UserInclude`
 */
export type UserInclude = Prisma.UserInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueUserArgs`
 */
export type FindUniqueUserArgs = Prisma.FindUniqueUserArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstUserArgs`
 */
export type FindFirstUserArgs = Prisma.FindFirstUserArgs

/**
 * @deprecated Renamed to `Prisma.FindManyUserArgs`
 */
export type FindManyUserArgs = Prisma.FindManyUserArgs

/**
 * @deprecated Renamed to `Prisma.UserCreateArgs`
 */
export type UserCreateArgs = Prisma.UserCreateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateArgs`
 */
export type UserUpdateArgs = Prisma.UserUpdateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyArgs`
 */
export type UserUpdateManyArgs = Prisma.UserUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.UserUpsertArgs`
 */
export type UserUpsertArgs = Prisma.UserUpsertArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteArgs`
 */
export type UserDeleteArgs = Prisma.UserDeleteArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteManyArgs`
 */
export type UserDeleteManyArgs = Prisma.UserDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateProfile`
 */
export type AggregateProfile = Prisma.AggregateProfile

/**
 * @deprecated Renamed to `Prisma.ProfileAvgAggregateOutputType`
 */
export type ProfileAvgAggregateOutputType = Prisma.ProfileAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfileSumAggregateOutputType`
 */
export type ProfileSumAggregateOutputType = Prisma.ProfileSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfileMinAggregateOutputType`
 */
export type ProfileMinAggregateOutputType = Prisma.ProfileMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfileMaxAggregateOutputType`
 */
export type ProfileMaxAggregateOutputType = Prisma.ProfileMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProfileCountAggregateOutputType`
 */
export type ProfileCountAggregateOutputType = Prisma.ProfileCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProfileArgs`
 */
export type AggregateProfileArgs = Prisma.AggregateProfileArgs

/**
 * @deprecated Renamed to `Prisma.ProfileAvgAggregateInputType`
 */
export type ProfileAvgAggregateInputType = Prisma.ProfileAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileSumAggregateInputType`
 */
export type ProfileSumAggregateInputType = Prisma.ProfileSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileMinAggregateInputType`
 */
export type ProfileMinAggregateInputType = Prisma.ProfileMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileMaxAggregateInputType`
 */
export type ProfileMaxAggregateInputType = Prisma.ProfileMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileCountAggregateInputType`
 */
export type ProfileCountAggregateInputType = Prisma.ProfileCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProfileSelect`
 */
export type ProfileSelect = Prisma.ProfileSelect

/**
 * @deprecated Renamed to `Prisma.ProfileInclude`
 */
export type ProfileInclude = Prisma.ProfileInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueProfileArgs`
 */
export type FindUniqueProfileArgs = Prisma.FindUniqueProfileArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstProfileArgs`
 */
export type FindFirstProfileArgs = Prisma.FindFirstProfileArgs

/**
 * @deprecated Renamed to `Prisma.FindManyProfileArgs`
 */
export type FindManyProfileArgs = Prisma.FindManyProfileArgs

/**
 * @deprecated Renamed to `Prisma.ProfileCreateArgs`
 */
export type ProfileCreateArgs = Prisma.ProfileCreateArgs

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateArgs`
 */
export type ProfileUpdateArgs = Prisma.ProfileUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateManyArgs`
 */
export type ProfileUpdateManyArgs = Prisma.ProfileUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ProfileUpsertArgs`
 */
export type ProfileUpsertArgs = Prisma.ProfileUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ProfileDeleteArgs`
 */
export type ProfileDeleteArgs = Prisma.ProfileDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ProfileDeleteManyArgs`
 */
export type ProfileDeleteManyArgs = Prisma.ProfileDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateCompany`
 */
export type AggregateCompany = Prisma.AggregateCompany

/**
 * @deprecated Renamed to `Prisma.CompanyAvgAggregateOutputType`
 */
export type CompanyAvgAggregateOutputType = Prisma.CompanyAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CompanySumAggregateOutputType`
 */
export type CompanySumAggregateOutputType = Prisma.CompanySumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CompanyMinAggregateOutputType`
 */
export type CompanyMinAggregateOutputType = Prisma.CompanyMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CompanyMaxAggregateOutputType`
 */
export type CompanyMaxAggregateOutputType = Prisma.CompanyMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CompanyCountAggregateOutputType`
 */
export type CompanyCountAggregateOutputType = Prisma.CompanyCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCompanyArgs`
 */
export type AggregateCompanyArgs = Prisma.AggregateCompanyArgs

/**
 * @deprecated Renamed to `Prisma.CompanyAvgAggregateInputType`
 */
export type CompanyAvgAggregateInputType = Prisma.CompanyAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompanySumAggregateInputType`
 */
export type CompanySumAggregateInputType = Prisma.CompanySumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompanyMinAggregateInputType`
 */
export type CompanyMinAggregateInputType = Prisma.CompanyMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompanyMaxAggregateInputType`
 */
export type CompanyMaxAggregateInputType = Prisma.CompanyMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompanyCountAggregateInputType`
 */
export type CompanyCountAggregateInputType = Prisma.CompanyCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CompanySelect`
 */
export type CompanySelect = Prisma.CompanySelect

/**
 * @deprecated Renamed to `Prisma.CompanyInclude`
 */
export type CompanyInclude = Prisma.CompanyInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueCompanyArgs`
 */
export type FindUniqueCompanyArgs = Prisma.FindUniqueCompanyArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstCompanyArgs`
 */
export type FindFirstCompanyArgs = Prisma.FindFirstCompanyArgs

/**
 * @deprecated Renamed to `Prisma.FindManyCompanyArgs`
 */
export type FindManyCompanyArgs = Prisma.FindManyCompanyArgs

/**
 * @deprecated Renamed to `Prisma.CompanyCreateArgs`
 */
export type CompanyCreateArgs = Prisma.CompanyCreateArgs

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateArgs`
 */
export type CompanyUpdateArgs = Prisma.CompanyUpdateArgs

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateManyArgs`
 */
export type CompanyUpdateManyArgs = Prisma.CompanyUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.CompanyUpsertArgs`
 */
export type CompanyUpsertArgs = Prisma.CompanyUpsertArgs

/**
 * @deprecated Renamed to `Prisma.CompanyDeleteArgs`
 */
export type CompanyDeleteArgs = Prisma.CompanyDeleteArgs

/**
 * @deprecated Renamed to `Prisma.CompanyDeleteManyArgs`
 */
export type CompanyDeleteManyArgs = Prisma.CompanyDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateProject`
 */
export type AggregateProject = Prisma.AggregateProject

/**
 * @deprecated Renamed to `Prisma.ProjectAvgAggregateOutputType`
 */
export type ProjectAvgAggregateOutputType = Prisma.ProjectAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectSumAggregateOutputType`
 */
export type ProjectSumAggregateOutputType = Prisma.ProjectSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectMinAggregateOutputType`
 */
export type ProjectMinAggregateOutputType = Prisma.ProjectMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectMaxAggregateOutputType`
 */
export type ProjectMaxAggregateOutputType = Prisma.ProjectMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectCountAggregateOutputType`
 */
export type ProjectCountAggregateOutputType = Prisma.ProjectCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProjectArgs`
 */
export type AggregateProjectArgs = Prisma.AggregateProjectArgs

/**
 * @deprecated Renamed to `Prisma.ProjectAvgAggregateInputType`
 */
export type ProjectAvgAggregateInputType = Prisma.ProjectAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectSumAggregateInputType`
 */
export type ProjectSumAggregateInputType = Prisma.ProjectSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectMinAggregateInputType`
 */
export type ProjectMinAggregateInputType = Prisma.ProjectMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectMaxAggregateInputType`
 */
export type ProjectMaxAggregateInputType = Prisma.ProjectMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectCountAggregateInputType`
 */
export type ProjectCountAggregateInputType = Prisma.ProjectCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectSelect`
 */
export type ProjectSelect = Prisma.ProjectSelect

/**
 * @deprecated Renamed to `Prisma.ProjectInclude`
 */
export type ProjectInclude = Prisma.ProjectInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueProjectArgs`
 */
export type FindUniqueProjectArgs = Prisma.FindUniqueProjectArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstProjectArgs`
 */
export type FindFirstProjectArgs = Prisma.FindFirstProjectArgs

/**
 * @deprecated Renamed to `Prisma.FindManyProjectArgs`
 */
export type FindManyProjectArgs = Prisma.FindManyProjectArgs

/**
 * @deprecated Renamed to `Prisma.ProjectCreateArgs`
 */
export type ProjectCreateArgs = Prisma.ProjectCreateArgs

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateArgs`
 */
export type ProjectUpdateArgs = Prisma.ProjectUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateManyArgs`
 */
export type ProjectUpdateManyArgs = Prisma.ProjectUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertArgs`
 */
export type ProjectUpsertArgs = Prisma.ProjectUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ProjectDeleteArgs`
 */
export type ProjectDeleteArgs = Prisma.ProjectDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ProjectDeleteManyArgs`
 */
export type ProjectDeleteManyArgs = Prisma.ProjectDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.UserWhereInput`
 */
export type UserWhereInput = Prisma.UserWhereInput

/**
 * @deprecated Renamed to `Prisma.UserOrderByInput`
 */
export type UserOrderByInput = Prisma.UserOrderByInput

/**
 * @deprecated Renamed to `Prisma.UserWhereUniqueInput`
 */
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ProfileWhereInput`
 */
export type ProfileWhereInput = Prisma.ProfileWhereInput

/**
 * @deprecated Renamed to `Prisma.ProfileOrderByInput`
 */
export type ProfileOrderByInput = Prisma.ProfileOrderByInput

/**
 * @deprecated Renamed to `Prisma.ProfileWhereUniqueInput`
 */
export type ProfileWhereUniqueInput = Prisma.ProfileWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.CompanyWhereInput`
 */
export type CompanyWhereInput = Prisma.CompanyWhereInput

/**
 * @deprecated Renamed to `Prisma.CompanyOrderByInput`
 */
export type CompanyOrderByInput = Prisma.CompanyOrderByInput

/**
 * @deprecated Renamed to `Prisma.CompanyWhereUniqueInput`
 */
export type CompanyWhereUniqueInput = Prisma.CompanyWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ProjectWhereInput`
 */
export type ProjectWhereInput = Prisma.ProjectWhereInput

/**
 * @deprecated Renamed to `Prisma.ProjectOrderByInput`
 */
export type ProjectOrderByInput = Prisma.ProjectOrderByInput

/**
 * @deprecated Renamed to `Prisma.ProjectWhereUniqueInput`
 */
export type ProjectWhereUniqueInput = Prisma.ProjectWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserCreateInput`
 */
export type UserCreateInput = Prisma.UserCreateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateInput`
 */
export type UserUpdateInput = Prisma.UserUpdateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyMutationInput`
 */
export type UserUpdateManyMutationInput = Prisma.UserUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ProfileCreateInput`
 */
export type ProfileCreateInput = Prisma.ProfileCreateInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateInput`
 */
export type ProfileUpdateInput = Prisma.ProfileUpdateInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateManyMutationInput`
 */
export type ProfileUpdateManyMutationInput = Prisma.ProfileUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.CompanyCreateInput`
 */
export type CompanyCreateInput = Prisma.CompanyCreateInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateInput`
 */
export type CompanyUpdateInput = Prisma.CompanyUpdateInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateManyMutationInput`
 */
export type CompanyUpdateManyMutationInput = Prisma.CompanyUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateInput`
 */
export type ProjectCreateInput = Prisma.ProjectCreateInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateInput`
 */
export type ProjectUpdateInput = Prisma.ProjectUpdateInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateManyMutationInput`
 */
export type ProjectUpdateManyMutationInput = Prisma.ProjectUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.EnumUserRoleFilter`
 */
export type EnumUserRoleFilter = Prisma.EnumUserRoleFilter

/**
 * @deprecated Renamed to `Prisma.CompanyRelationFilter`
 */
export type CompanyRelationFilter = Prisma.CompanyRelationFilter

/**
 * @deprecated Renamed to `Prisma.ProfileRelationFilter`
 */
export type ProfileRelationFilter = Prisma.ProfileRelationFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.UserRelationFilter`
 */
export type UserRelationFilter = Prisma.UserRelationFilter

/**
 * @deprecated Renamed to `Prisma.ProjectListRelationFilter`
 */
export type ProjectListRelationFilter = Prisma.ProjectListRelationFilter

/**
 * @deprecated Renamed to `Prisma.BoolFilter`
 */
export type BoolFilter = Prisma.BoolFilter

/**
 * @deprecated Renamed to `Prisma.CompanyCreateOneWithoutUserInput`
 */
export type CompanyCreateOneWithoutUserInput = Prisma.CompanyCreateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileCreateOneWithoutUserInput`
 */
export type ProfileCreateOneWithoutUserInput = Prisma.ProfileCreateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.EnumUserRoleFieldUpdateOperationsInput`
 */
export type EnumUserRoleFieldUpdateOperationsInput = Prisma.EnumUserRoleFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateOneWithoutUserInput`
 */
export type CompanyUpdateOneWithoutUserInput = Prisma.CompanyUpdateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateOneWithoutUserInput`
 */
export type ProfileUpdateOneWithoutUserInput = Prisma.ProfileUpdateOneWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutProfilesInput`
 */
export type UserCreateOneWithoutProfilesInput = Prisma.UserCreateOneWithoutProfilesInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutProfilesInput`
 */
export type UserUpdateOneRequiredWithoutProfilesInput = Prisma.UserUpdateOneRequiredWithoutProfilesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutCompanyInput`
 */
export type UserCreateOneWithoutCompanyInput = Prisma.UserCreateOneWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateManyWithoutCompanyInput`
 */
export type ProjectCreateManyWithoutCompanyInput = Prisma.ProjectCreateManyWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutCompanyInput`
 */
export type UserUpdateOneRequiredWithoutCompanyInput = Prisma.UserUpdateOneRequiredWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateManyWithoutCompanyInput`
 */
export type ProjectUpdateManyWithoutCompanyInput = Prisma.ProjectUpdateManyWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.CompanyCreateOneWithoutProjectsInput`
 */
export type CompanyCreateOneWithoutProjectsInput = Prisma.CompanyCreateOneWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.BoolFieldUpdateOperationsInput`
 */
export type BoolFieldUpdateOperationsInput = Prisma.BoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateOneRequiredWithoutProjectsInput`
 */
export type CompanyUpdateOneRequiredWithoutProjectsInput = Prisma.CompanyUpdateOneRequiredWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumUserRoleFilter`
 */
export type NestedEnumUserRoleFilter = Prisma.NestedEnumUserRoleFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedBoolFilter`
 */
export type NestedBoolFilter = Prisma.NestedBoolFilter

/**
 * @deprecated Renamed to `Prisma.CompanyCreateWithoutUserInput`
 */
export type CompanyCreateWithoutUserInput = Prisma.CompanyCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CompanyCreateOrConnectWithoutuserInput`
 */
export type CompanyCreateOrConnectWithoutuserInput = Prisma.CompanyCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.ProfileCreateWithoutUserInput`
 */
export type ProfileCreateWithoutUserInput = Prisma.ProfileCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileCreateOrConnectWithoutuserInput`
 */
export type ProfileCreateOrConnectWithoutuserInput = Prisma.ProfileCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateWithoutUserInput`
 */
export type CompanyUpdateWithoutUserInput = Prisma.CompanyUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpsertWithoutUserInput`
 */
export type CompanyUpsertWithoutUserInput = Prisma.CompanyUpsertWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpdateWithoutUserInput`
 */
export type ProfileUpdateWithoutUserInput = Prisma.ProfileUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.ProfileUpsertWithoutUserInput`
 */
export type ProfileUpsertWithoutUserInput = Prisma.ProfileUpsertWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutProfilesInput`
 */
export type UserCreateWithoutProfilesInput = Prisma.UserCreateWithoutProfilesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutprofilesInput`
 */
export type UserCreateOrConnectWithoutprofilesInput = Prisma.UserCreateOrConnectWithoutprofilesInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutProfilesInput`
 */
export type UserUpdateWithoutProfilesInput = Prisma.UserUpdateWithoutProfilesInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutProfilesInput`
 */
export type UserUpsertWithoutProfilesInput = Prisma.UserUpsertWithoutProfilesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutCompanyInput`
 */
export type UserCreateWithoutCompanyInput = Prisma.UserCreateWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutcompanyInput`
 */
export type UserCreateOrConnectWithoutcompanyInput = Prisma.UserCreateOrConnectWithoutcompanyInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateWithoutCompanyInput`
 */
export type ProjectCreateWithoutCompanyInput = Prisma.ProjectCreateWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOrConnectWithoutcompanyInput`
 */
export type ProjectCreateOrConnectWithoutcompanyInput = Prisma.ProjectCreateOrConnectWithoutcompanyInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutCompanyInput`
 */
export type UserUpdateWithoutCompanyInput = Prisma.UserUpdateWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutCompanyInput`
 */
export type UserUpsertWithoutCompanyInput = Prisma.UserUpsertWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithWhereUniqueWithoutCompanyInput`
 */
export type ProjectUpdateWithWhereUniqueWithoutCompanyInput = Prisma.ProjectUpdateWithWhereUniqueWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateManyWithWhereWithoutCompanyInput`
 */
export type ProjectUpdateManyWithWhereWithoutCompanyInput = Prisma.ProjectUpdateManyWithWhereWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.ProjectScalarWhereInput`
 */
export type ProjectScalarWhereInput = Prisma.ProjectScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertWithWhereUniqueWithoutCompanyInput`
 */
export type ProjectUpsertWithWhereUniqueWithoutCompanyInput = Prisma.ProjectUpsertWithWhereUniqueWithoutCompanyInput

/**
 * @deprecated Renamed to `Prisma.CompanyCreateWithoutProjectsInput`
 */
export type CompanyCreateWithoutProjectsInput = Prisma.CompanyCreateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.CompanyCreateOrConnectWithoutprojectsInput`
 */
export type CompanyCreateOrConnectWithoutprojectsInput = Prisma.CompanyCreateOrConnectWithoutprojectsInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpdateWithoutProjectsInput`
 */
export type CompanyUpdateWithoutProjectsInput = Prisma.CompanyUpdateWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.CompanyUpsertWithoutProjectsInput`
 */
export type CompanyUpsertWithoutProjectsInput = Prisma.CompanyUpsertWithoutProjectsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithoutCompanyInput`
 */
export type ProjectUpdateWithoutCompanyInput = Prisma.ProjectUpdateWithoutCompanyInput